[["index.html", "ggChIPvis Reference Book Chapter 1 About 1.1 Citation 1.2 Installation 1.3 Example", " ggChIPvis Reference Book Jun Zhang 2023-10-24 Chapter 1 About ggChIPvis is designed to re-produce the Profile and Heatmap plots uisng ggplot2 package with more parameter controls and settings. ggChIPvis can accept the data from EnrichedHeatmap::normalizeToMatrix, ChIPseeker::getTagMatrix and deeptools’ computeMatrix output data which allow you re-draw the plot in R session with other graphic modifications. 1.1 Citation Jun Zhang (2023). ggChIPvis: Profile and Heatmap Visualization by Using ggplot2. https://github.com/junjunlab/ggChIPvis 1.2 Installation You can install the development version of ggChIPvis: # install.packages(&quot;devtools&quot;) devtools::install_github(&quot;junjunlab/ggChIPvis&quot;) # or remotes::install_github(&quot;junjunlab/ggChIPvis&quot;) library(ggChIPvis) 1.3 Example "],["parse-normalizetomatrix.html", "Chapter 2 Parse NormalizeToMatrix 2.1 Test data 2.2 Prepare interest genomic regions 2.3 Compute nomalized matrix 2.4 Extract data 2.5 EnrichedHeatmap visualization 2.6 ChipVis visualization 2.7 Cluster for genes 2.8 Plot around TSS site 2.9 Samples with different target regions", " Chapter 2 Parse NormalizeToMatrix Function retriveData can extract data from EnrichedHeatmap::normalizeToMatrix function output. Then we can visualize the data extracted data from retriveData. retriveData returns a list which includes two long-format data.frame profile and heatmap. This charpter we will describe how to achive this. 2.1 Test data The bigwig data can be fetched from GSE212977. Load packages we need: library(ggChIPvis) library(ggplot2) library(rtracklayer) library(tidyverse) library(ggh4x) library(EnrichedHeatmap) 2.2 Prepare interest genomic regions Here we prepare human GRCh37 version of genes, we select 2000 genes for test: setwd(&quot;./&quot;) gtf &lt;- import.gff(&quot;Homo_sapiens.GRCh37.87.gtf.gz&quot;,format = &quot;gtf&quot;) |&gt; data.frame() |&gt; filter(type == &quot;gene&quot;) |&gt; select(seqnames,start,end,strand) |&gt; GRanges() gtf # GRanges object with 57905 ranges and 0 metadata columns: # seqnames ranges strand # &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; # [1] 1 11869-14412 + # [2] 1 14363-29806 - # ... genes &lt;- head(gtf,2000) 2.3 Compute nomalized matrix Now we use normalizeToMatrix compute normalized signals for bigiwig files around target regions: bwfile &lt;- list.files(path = &quot;GSE212977_RAW/&quot;,pattern = &quot;.bw&quot;,full.names = T) bwfile # [1] &quot;GSE212977_RAW/GSM6567977_DSRCT1.H3K27ac.bw&quot; # [2] &quot;GSE212977_RAW/GSM6567978_DSRCT1.H3K27me3.bw&quot; # [3] &quot;GSE212977_RAW/GSM6567979_DSRCT1.H3K4m1.bw&quot; # [4] &quot;GSE212977_RAW/GSM6567980_DSRCT1.H3K4m3.bw&quot; # [5] &quot;GSE212977_RAW/GSM6567981_DSRCT1.H3K9ac.bw&quot; # [6] &quot;GSE212977_RAW/GSM6567982_DSRCT1.INPUT.bw&quot; # x = 1 # compute matrix lapply(seq_along(bwfile), function(x){ # func test bw &lt;- import.bw(bwfile[x]) mat_trim = normalizeToMatrix(bw, genes, value_column = &quot;score&quot;, extend = 3000, mean_mode = &quot;w0&quot;, w = 50, keep = c(0, 0.99), background = 0, smooth = TRUE) }) -&gt; mat_list 2.4 Extract data We can see the extracted data which include two long-format data.frame with some other attributes: sample.names &lt;- c(&#39;H3K27ac&#39;,&#39;H3K27me3&#39;,&#39;H3K4m1&#39;,&#39;H3K4m3&#39;,&#39;H3K9ac&#39;,&#39;INPUT&#39;) # get matrix data mat_df &lt;- retriveData(mat.list = mat_list,sample.names = sample.names) # check str(mat_df) # List of 2 # $ profile:&#39;data.frame&#39;: 1200 obs. of 6 variables: # ..$ density : num [1:1200] 0.851 0.829 0.824 0.83 0.836 ... # ..$ x : int [1:1200] 1 2 3 4 5 6 7 8 9 10 ... # ..$ sample : chr [1:1200] &quot;H3K27ac&quot; &quot;H3K27ac&quot; &quot;H3K27ac&quot; &quot;H3K27ac&quot; ... # ..$ split : chr [1:1200] &quot;Binding sites: 2000&quot; &quot;Binding sites: 2000&quot; &quot;Binding sites: 2000&quot; &quot;Binding sites: 2000&quot; ... # ..$ lower_ci: num [1:1200] 0.763 0.743 0.74 0.747 0.753 ... # ..$ upper_ci: num [1:1200] 0.939 0.915 0.907 0.912 0.919 ... # $ heatmap:&#39;data.frame&#39;: 2400000 obs. of 5 variables: # ..$ y : Factor w/ 2000 levels &quot;Binding sites: 2000_455&quot;,..: 1316 1321 1650 1861 943 673 1261 1032 1429 389 ... # ..$ x : num [1:2400000] 1 1 1 1 1 1 1 1 1 1 ... # ..$ value : num [1:2400000] 0 1.411 1.526 0.442 0 ... # ..$ split : chr [1:2400000] &quot;Binding sites: 2000\\n(n=2000)&quot; &quot;Binding sites: 2000\\n(n=2000)&quot; &quot;Binding sites: 2000\\n(n=2000)&quot; &quot;Binding sites: 2000\\n(n=2000)&quot; ... # ..$ sample: chr [1:2400000] &quot;H3K27ac&quot; &quot;H3K27ac&quot; &quot;H3K27ac&quot; &quot;H3K27ac&quot; ... # - attr(*, &quot;class&quot;)= chr &quot;chipData&quot; # - attr(*, &quot;axis_name&quot;)= chr [1:4] &quot;-3000&quot; &quot;start&quot; &quot;end&quot; &quot;3000&quot; # - attr(*, &quot;axis_breaks&quot;)= num [1:4] 1 61 141 200 # - attr(*, &quot;vline_x&quot;)= num [1:2] 61 141 # - attr(*, &quot;axis_textx_hjust&quot;)= num [1:4] 0 0.5 0.5 1 2.5 EnrichedHeatmap visualization First we show what the EnrichedHeatmap output looks like: bg_col &lt;- RColorBrewer::brewer.pal(6, &quot;Set2&quot;) lapply(seq_along(bwfile), function(x){ # func test bw &lt;- import.bw(bwfile[x]) mat_trim = normalizeToMatrix(bw, genes, value_column = &quot;score&quot;, extend = 3000, mean_mode = &quot;w0&quot;, w = 50, keep = c(0, 0.99), background = 0, smooth = TRUE) EnrichedHeatmap(mat_trim, col = c(&quot;grey95&quot;,bg_col[x]), name = sample.names[x], column_title = sample.names[x], column_title_gp = gpar(fontsize = 10, fill = bg_col[x]), # top_annotation = HeatmapAnnotation( # enriched = anno_enriched( # ylim = c(0, 30))), use_raster = F, # show_heatmap_legend = lgd[x], show_heatmap_legend = T ) }) -&gt; ht_list # merge plot list pdf(&quot;ht_6samples.pdf&quot;,width = 12,height = 8,onefile = F) draw(Reduce(&quot;+&quot;,ht_list), ht_gap = unit(0.8, &quot;cm&quot;), heatmap_legend_side = &quot;bottom&quot;) dev.off() 2.6 ChipVis visualization Function ChipVis accept output object from retriveData. Just a little code needed to plot the data. You can plot the profile plot , heatmap plot or both with plot.type parameter. 2.6.1 Profile plot Now we do some examples for profile plot. Default output: ChipVis(object = mat_df, plot.type = &quot;profile&quot;) Control the line layers; ChipVis(object = mat_df, plot.type = &quot;profile&quot;, geom_line_params = list(color = &quot;#C23373&quot;,linewidth = 1)) Change the sample orders: ChipVis(object = mat_df, plot.type = &quot;profile&quot;, geom_line_params = list(color = &quot;#C23373&quot;,linewidth = 1), sample.order = rev(sample.names)) Don’t draw rect and control the facet parameters: ChipVis(object = mat_df, plot.type = &quot;profile&quot;, geom_line_params = list(color = &quot;#C23373&quot;,linewidth = 1), sample.order = rev(sample.names), facet_profile_params = list(scales = &quot;free_y&quot;,independent = &quot;y&quot;), draw_rect = F) Change the facet background colors: ChipVis(object = mat_df, plot.type = &quot;profile&quot;, geom_line_params = list(color = &quot;#C23373&quot;,linewidth = 1), sample.order = rev(sample.names), facet_profile_params = list(strip = strip_themed(background_x = elem_list_rect(fill = RColorBrewer::brewer.pal(6,&quot;Set3&quot;), color = RColorBrewer::brewer.pal(6,&quot;Set3&quot;)) ))) Control the vertical line layer: ChipVis(object = mat_df, plot.type = &quot;profile&quot;, vline_params = list(linewidth = 1,color = &quot;pink&quot;)) 2.6.2 Heatmap plot Default output: ChipVis(object = mat_df, plot.type = &quot;heatmap&quot;) Change the facet background colors: ChipVis(object = mat_df, plot.type = &quot;heatmap&quot;, sample.order = rev(sample.names), facet_heatmap_params = list(strip = strip_themed(background_x = elem_list_rect(fill = RColorBrewer::brewer.pal(6,&quot;Set3&quot;), color = RColorBrewer::brewer.pal(6,&quot;Set3&quot;)) ))) Remove the y axis facet border colors: ChipVis(object = mat_df, plot.type = &quot;heatmap&quot;, sample.order = rev(sample.names), facet_heatmap_params = list(strip = strip_themed(background_x = elem_list_rect(fill = RColorBrewer::brewer.pal(6,&quot;Set3&quot;), color = RColorBrewer::brewer.pal(6,&quot;Set3&quot;)), background_y = elem_list_rect(color = &quot;grey95&quot;) ))) Assign each sample with different color scales: library(RColorBrewer) multi_heatmap_col = list(c(&quot;grey95&quot;,brewer.pal(12,&quot;Set3&quot;)[1]), c(&quot;grey95&quot;,brewer.pal(12,&quot;Set3&quot;)[2]), c(&quot;grey95&quot;,brewer.pal(12,&quot;Set3&quot;)[3]), c(&quot;grey95&quot;,brewer.pal(12,&quot;Set3&quot;)[4]), c(&quot;grey95&quot;,brewer.pal(12,&quot;Set3&quot;)[5]), c(&quot;grey95&quot;,brewer.pal(12,&quot;Set3&quot;)[6])) ChipVis(object = mat_df, plot.type = &quot;heatmap&quot;, sample.order = rev(sample.names), facet_heatmap_params = list(strip = strip_themed(background_x = elem_list_rect(fill = RColorBrewer::brewer.pal(6,&quot;Set3&quot;), color = RColorBrewer::brewer.pal(6,&quot;Set3&quot;)), background_y = elem_list_rect(color = &quot;grey95&quot;) )), multi.heatmap.col = multi_heatmap_col) 2.6.3 Combined plot You can define the plot.type = “both” to combine the profile and heatmap plot: ChipVis(object = mat_df, plot.type = &quot;both&quot;) Also you can assign different color scales for every sample: ChipVis(object = mat_df, plot.type = &quot;both&quot;, multi.heatmap.col = multi_heatmap_col) 2.7 Cluster for genes Sometimes you need cluster the genes into multiple groups like gain/upregulatted genes, retained/non-changed genes and loss/downregulatted genes. You can define the row_split parameters to define how the genes were grouped by. Here we split the genes into three groups and add group labels for samples. row_split = rep(c(&quot;group1&quot;, &quot;group2&quot;,&quot;group3&quot;), c(400,600,1000)) # get matrix data mat_df.sp &lt;- retriveData(mat.list = mat_list, sample.names = sample.names, row.split = row_split, group.sample = rep(c(&quot;treat&quot;,&quot;control&quot;),c(3,3))) Plot profile: ChipVis(object = mat_df.sp, plot.type = &quot;profile&quot;) Change samples orders: ChipVis(object = mat_df.sp, plot.type = &quot;profile&quot;, sample.order = rev(sample.names)) Change line colors: ChipVis(object = mat_df.sp, plot.type = &quot;profile&quot;, sample.order = rev(sample.names)) + scale_color_brewer(palette = &quot;Paired&quot;) + scale_fill_brewer(palette = &quot;Paired&quot;) Add nested line for samples groups: ChipVis(object = mat_df.sp, plot.type = &quot;profile&quot;, sample.order = rev(sample.names), facet_profile_params = list(nest_line = element_line(linetype = 1)), theme_params = list(strip.background = element_blank(), ggh4x.facet.nestline = element_line(linewidth = 1, colour = &quot;black&quot;))) Change facet background colors: ChipVis(object = mat_df.sp, plot.type = &quot;profile&quot;, geom_line_params = list(linewidth = 1), sample.order = rev(sample.names), facet_profile_params = list(strip = strip_themed(background_x = elem_list_rect(fill = c(rep(c(&quot;#85E6C5&quot;,&quot;pink&quot;),c(3,3)), RColorBrewer::brewer.pal(6,&quot;Set3&quot;)), color = c(rep(c(&quot;#85E6C5&quot;,&quot;pink&quot;),c(3,3)), RColorBrewer::brewer.pal(6,&quot;Set3&quot;))) )), theme_params = list(panel.spacing.x = unit(0,&quot;mm&quot;))) Heatmap visualization: ChipVis(object = mat_df.sp, plot.type = &quot;heatmap&quot;, sample.order = rev(sample.names)) Add nested line: ChipVis(object = mat_df.sp, plot.type = &quot;heatmap&quot;, sample.order = rev(sample.names), facet_heatmap_params = list(nest_line = element_line(linetype = 1)), theme_params = list(strip.background = element_blank(), ggh4x.facet.nestline = element_line(linewidth = 1, colour = &quot;black&quot;))) Change the rowsplit groups orders: ChipVis(object = mat_df.sp, plot.type = &quot;heatmap&quot;, sample.order = rev(sample.names), facet_heatmap_params = list(nest_line = element_line(linetype = 1)), theme_params = list(strip.background = element_blank(), ggh4x.facet.nestline = element_line(linewidth = 1, colour = &quot;black&quot;)), rowsplit.order = c(&quot;group3\\n(n=1000)&quot;,&quot;group1\\n(n=400)&quot;,&quot;group2\\n(n=600)&quot;)) Combine the profile plot and heatmap: ChipVis(object = mat_df.sp, plot.type = &quot;both&quot;, sample.order = rev(sample.names), facet_profile_params = list(nest_line = element_line(linetype = 1)), add_nested_line = T) Control the color legend bar height: ChipVis(object = mat_df.sp, plot.type = &quot;both&quot;, sample.order = rev(sample.names), facet_profile_params = list(nest_line = element_line(linetype = 1)), add_nested_line = T, multi.heatmap.col = multi_heatmap_col, multi_legend_barheight = 0.75) Put the legend below the plot: ChipVis(object = mat_df.sp, plot.type = &quot;both&quot;, sample.order = rev(sample.names), facet_profile_params = list(nest_line = element_line(linetype = 1)), add_nested_line = T, theme_params = list(legend.position = &quot;bottom&quot;), geom_line_params = list(show.legend = F), multi.heatmap.col = multi_heatmap_col, multi_legend_barheight = 0.75) 2.8 Plot around TSS site Upper codes showed how we plot around region body of interest genomic regions. Here we show example plots around TSS sites. Perepare data we need: tss &lt;- promoters(gtf |&gt; head(2000),upstream = 0, downstream = 1) tss # GRanges object with 2000 ranges and 0 metadata columns: # seqnames ranges strand # &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; # [1] 1 11869 + # [2] 1 29806 - # comput matrix lapply(seq_along(bwfile), function(x){ # func test bw &lt;- import.bw(bwfile[x]) mat_trim = normalizeToMatrix(bw, tss, value_column = &quot;score&quot;, extend = 3000, mean_mode = &quot;w0&quot;, w = 50, keep = c(0, 0.99), background = 0, smooth = TRUE) }) -&gt; mat_list sample.names &lt;- c(&#39;H3K27ac&#39;,&#39;H3K27me3&#39;,&#39;H3K4m1&#39;,&#39;H3K4m3&#39;,&#39;H3K9ac&#39;,&#39;INPUT&#39;) # get matrix data mat_df.sp.tss &lt;- retriveData(mat.list = mat_list, sample.names = sample.names, row.split = row_split, group.sample = rep(c(&quot;treat&quot;,&quot;control&quot;),c(3,3))) Profile plot: ChipVis(object = mat_df.sp.tss, plot.type = &quot;profile&quot;, sample.order = rev(sample.names)) Heatmap plot: ChipVis(object = mat_df.sp.tss, plot.type = &quot;heatmap&quot;, sample.order = rev(sample.names)) Combined plot: ChipVis(object = mat_df.sp.tss, plot.type = &quot;both&quot;, sample.order = rev(sample.names)) Change the axis labels: attr(mat_df.sp.tss,&quot;axis_name&quot;) &lt;- c(&quot;-3kb&quot;,&quot;TSS&quot;,&quot;3kb&quot;) ChipVis(object = mat_df.sp.tss, plot.type = &quot;both&quot;, sample.order = rev(sample.names), facet_profile_params = list(nest_line = element_line(linetype = 1)), add_nested_line = T) 2.9 Samples with different target regions In some situations, each sample may enriched different target genomic regions rather than same regions. This means the y axis is different from each other. Here we also show some examples for this situation. Get normalized signals for each sample with different regions: genes &lt;- head(gtf,500) genes2 &lt;- gtf[501:1500,] genes3 &lt;- gtf[1501:3000,] rg &lt;- list(genes,genes2,genes3) # comput matrix lapply(seq_along(bwfile[1:3]), function(x){ # func test bw &lt;- import.bw(bwfile[x]) mat_trim = normalizeToMatrix(bw, rg[[x]], value_column = &quot;score&quot;, extend = 3000, mean_mode = &quot;w0&quot;, w = 50, keep = c(0, 0.99), background = 0, smooth = TRUE) }) -&gt; mat_list.ng sample.names &lt;- c(&#39;H3K27ac&#39;,&#39;H3K27me3&#39;,&#39;H3K4m1&#39;) # get matrix data mat_df &lt;- retriveData(mat.list = mat_list.ng, sample.names = sample.names) We can see the matrices have different rows: Profile plot: ChipVis(object = mat_df, plot.type = &quot;profile&quot;) Heatmap plot, here you can see some blank facet panels in plot. This is because each sample have different target regions: ChipVis(object = mat_df, plot.type = &quot;heatmap&quot;) You can use the merge_facet the re-arrange the plot: ChipVis(object = mat_df, plot.type = &quot;heatmap&quot;, merge_facet = T) Assign multiple color scales for each sample: ChipVis(object = mat_df, plot.type = &quot;heatmap&quot;, merge_facet = T, multi.heatmap.col = list(c(&quot;grey95&quot;,&quot;#068DA9&quot;), c(&quot;grey95&quot;,&quot;#C23373&quot;), c(&quot;grey95&quot;,&quot;#EE9322&quot;))) "],["parse-gettagmatrix.html", "Chapter 3 Parse getTagMatrix 3.1 Do enrichment analysis 3.2 Profile plot 3.3 Heatmap plot 3.4 Combined plot", " Chapter 3 Parse getTagMatrix Function getTagMatrix is different from normalizeToMatrix which is used to use target genomic regions to do enrichment analysis around specific regions. While normalizeToMatrix is using binding signals on genome in bigwig files and do the enrichment analysis on specific regions. 3.1 Do enrichment analysis library(ChIPseeker) library(TxDb.Hsapiens.UCSC.hg19.knownGene) txdb &lt;- TxDb.Hsapiens.UCSC.hg19.knownGene files &lt;- getSampleFiles() seek_list &lt;- lapply(4:5, function(x){ peak &lt;- readPeakFile(files[[x]]) ## The results of binning method and normal method are nearly the same. tagMatrix_binning &lt;- getTagMatrix(peak = peak, TxDb = txdb, upstream = 3000, downstream = 3000, type = &quot;body&quot;, by = &quot;gene&quot;, nbin = 800) }) # &gt;&gt; binning method is used...2023-10-17 21:06:24 # &gt;&gt; preparing body regions by gene... 2023-10-17 21:06:24 # &gt;&gt; preparing tag matrix by binning... 2023-10-17 21:06:24 # ... mat_df &lt;- retriveData(mat.list = seek_list, sample.names = c(&quot;CBX6&quot;,&quot;CBX7&quot;), ChIPseeker = T) 3.2 Profile plot ChipVis(object = mat_df,plot.type = &quot;profile&quot;) We can use ChipSeeker to see the original plot: plotPeakProf2(files[4:5], upstream = rel(0.2), downstream = rel(0.2), by = &quot;gene&quot;, type = &quot;body&quot;, TxDb = txdb, facet = &quot;column&quot;, nbin = 800,free_y = FALSE) 3.3 Heatmap plot ChipVis(object = mat_df,plot.type = &quot;heatmap&quot;) Merge facet panels: ChipVis(object = mat_df,plot.type = &quot;heatmap&quot;, merge_facet = T) Assign multiple color scales: ChipVis(object = mat_df,plot.type = &quot;heatmap&quot;, merge_facet = T, multi.heatmap.col = list(c(&quot;grey95&quot;,&quot;#068DA9&quot;), c(&quot;grey95&quot;,&quot;#C23373&quot;))) Check the original heatmap: tagHeatmap(seek_list) 3.4 Combined plot ChipVis(object = mat_df,plot.type = &quot;both&quot;) Remove blank panels: ChipVis(object = mat_df,plot.type = &quot;both&quot;,merge_facet = T) "],["parse-computematrix.html", "Chapter 4 Parse computeMatrix 4.1 Test data 4.2 Prepare target genes 4.3 Using computeMatrix and plot data 4.4 Parse deeptools output with reference-point mode 4.5 Parse deeptools output with scale-regions mode", " Chapter 4 Parse computeMatrix ggChIPvis can also parse the deeptools computeMatrix command output data. You can use parseDeeptools function to prepare a list of matrices for retriveData function and visualization can be performed by using ChipVis. 4.1 Test data Test data can be fetched from GSE181714. The ralated paper is H3K4me3 regulates RNA polymerase II promoter-proximal pause-release. The related plot shows below: 4.2 Prepare target genes setwd(&quot;GSE181714_RAW&quot;) getwd() gtf &lt;- import.gff(&quot;../Mus_musculus.GRCm38.102.gtf.gz&quot;,format = &quot;gtf&quot;) |&gt; data.frame() |&gt; filter(type == &quot;gene&quot;) genes &lt;- gtf |&gt; select(seqnames,start,end,gene_id,gene_name,strand) |&gt; mutate(seqnames = paste0(&quot;chr&quot;,seqnames)) write.table(head(genes,5000),file = &quot;genes.bed&quot;, col.names = F,quote = F,row.names = F,sep = &quot;\\t&quot;) pt &lt;- gtf |&gt; filter(gene_biotype == &quot;protein_coding&quot;) |&gt; select(seqnames,start,end,gene_id,gene_name,strand) |&gt; mutate(seqnames = paste0(&quot;chr&quot;,seqnames)) write.table(head(pt,5000),file = &quot;pt_genes.bed&quot;, col.names = F,quote = F,row.names = F,sep = &quot;\\t&quot;) ncd &lt;- gtf |&gt; filter(gene_biotype != &quot;protein_coding&quot;) |&gt; select(seqnames,start,end,gene_id,gene_name,strand) |&gt; mutate(seqnames = paste0(&quot;chr&quot;,seqnames)) write.table(head(ncd,5000),file = &quot;non_pt_genes.bed&quot;, col.names = F,quote = F,row.names = F,sep = &quot;\\t&quot;) 4.3 Using computeMatrix and plot data Then we use computeMatrix to get the normalized data and plot them with deeptools: 4.3.1 reference-point mode computeMatrix reference-point -p 10 \\ --binSize 50 \\ --referencePoint TSS \\ -a 3000 -b 3000 \\ -R genes.bed \\ -S GSM5513870_H3K4me3_RBBP5FKBP_0h.bw GSM5513872_H3K4me3_RBBP5FKBP_2h.bw GSM5513873_H3K4me3_RBBP5FKBP_8h.bw GSM5513871_H3K4me3_RBBP5FKBP_24h.bw \\ --skipZeros \\ -o refPoint-data.gz # plot plotHeatmap -m refPoint-data.gz \\ --missingDataColor 1 \\ --colorList &#39;white,#0066CC&#39; \\ --heatmapHeight 12 \\ -o refPoint-heatmap.pdf 4.3.2 scale-regions mode computeMatrix scale-regions -p 10 \\ --binSize 50 \\ --regionBodyLength 5000 \\ -a 3000 -b 3000 \\ -R pt_genes.bed non_pt_genes.bed \\ -S GSM5513870_H3K4me3_RBBP5FKBP_0h.bw GSM5513872_H3K4me3_RBBP5FKBP_2h.bw GSM5513873_H3K4me3_RBBP5FKBP_8h.bw GSM5513871_H3K4me3_RBBP5FKBP_24h.bw \\ --skipZeros \\ -o scaleRegion-data.gz # plot plotHeatmap -m scaleRegion-data.gz \\ --missingDataColor 1 \\ --colorList &#39;white,#0066CC&#39; \\ --heatmapHeight 12 \\ -o scaleRegion-heatmap.pdf 4.4 Parse deeptools output with reference-point mode 4.4.1 Extract data # parse deeptools output deep_mat &lt;- parseDeeptools(deeptools_output = &quot;refPoint-data.gz&quot;) # attributes class(deep_mat[[1]]) # [1] &quot;deeptoolsMat&quot; &quot;matrix&quot; attributes(deep_mat[[1]]) # $dim # [1] 5000 120 # # $upstream # [1] 3000 # # $downstream # [1] 3000 # # $extend # [1] 3000 3000 # # $upstream_index # [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 # [34] 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 # # $target_index # integer(0) # # $downstream_index # [1] 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 # [25] 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 # [49] 109 110 111 112 113 114 115 116 117 118 119 120 # # $sample_name # [1] &quot;GSM5513870_H3K4me3_RBBP5FKBP_0h&quot; # # $group_labels # [1] &quot;genes&quot; # # $group_numbers # [1] 5000 # # $class # [1] &quot;deeptoolsMat&quot; &quot;matrix&quot; # get data mat_df &lt;- retriveData(mat.list = deep_mat,rm.extreme.value = T, sample.names = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), group.sample = rep(&quot;H3H4me3&quot;,4)) 4.4.2 Profile plot ChipVis(object = mat_df,plot.type = &quot;profile&quot;) Control facet layer and add nested line: ChipVis(object = mat_df,plot.type = &quot;profile&quot;, sample.order = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), facet_profile_params = list(nest_line = element_line(linetype = 1)), theme_params = list(strip.background = element_blank(), ggh4x.facet.nestline = element_line(linewidth = 1, colour = &quot;black&quot;))) 4.4.3 Heatmap plot ChipVis(object = mat_df,plot.type = &quot;heatmap&quot;) Control facet layer and add nested line: ChipVis(object = mat_df,plot.type = &quot;heatmap&quot;, sample.order = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), facet_heatmap_params = list(nest_line = element_line(linetype = 1)), theme_params = list(strip.background = element_blank(), ggh4x.facet.nestline = element_line(linewidth = 1, colour = &quot;black&quot;))) Using another heatmap rank method: mat_df1 &lt;- retriveData(mat.list = deep_mat,rm.extreme.value = T, sample.names = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), group.sample = rep(&quot;H3H4me3&quot;,4), heatmap_rank_method = &quot;weighting&quot;) ChipVis(object = mat_df1,plot.type = &quot;heatmap&quot;, sample.order = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), facet_heatmap_params = list(nest_line = element_line(linetype = 1)), theme_params = list(strip.background = element_blank(), ggh4x.facet.nestline = element_line(linewidth = 1, colour = &quot;black&quot;))) Change heatmap color: ChipVis(object = mat_df1,plot.type = &quot;both&quot;, sample.order = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;)) + scale_fill_gradient(low = &quot;white&quot;,high = &quot;#713ABE&quot;,name = &quot;signal&quot;) 4.5 Parse deeptools output with scale-regions mode 4.5.1 Extract data # parse deeptools output deep_mat &lt;- parseDeeptools(deeptools_output = &quot;scaleRegion-data.gz&quot;) # attributes class(deep_mat[[1]]) attributes(deep_mat[[1]]) mat_df &lt;- retriveData(mat.list = deep_mat,rm.extreme.value = T, heatmap_rank_method = &quot;weighting&quot;, sample.names = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), group.sample = rep(&quot;H3H4me3&quot;,4)) 4.5.2 Profile plot ChipVis(object = mat_df,plot.type = &quot;profile&quot;, sample.order = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), facet_profile_params = list(nest_line = element_line(linetype = 1)), theme_params = list(strip.background = element_blank(), ggh4x.facet.nestline = element_line(linewidth = 1, colour = &quot;black&quot;))) 4.5.3 Heatmap plot ChipVis(object = mat_df,plot.type = &quot;heatmap&quot;, sample.order = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), facet_heatmap_params = list(nest_line = element_line(linetype = 1)), theme_params = list(strip.background = element_blank(), ggh4x.facet.nestline = element_line(linewidth = 1, colour = &quot;black&quot;))) 4.5.4 Combined plot ChipVis(object = mat_df,plot.type = &quot;both&quot;, sample.order = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), facet_profile_params = list(nest_line = element_line(linetype = 1,colour = &quot;black&quot;)), add_nested_line = T) + scale_fill_gradient(low = &quot;white&quot;,high = &quot;#1A5D1A&quot;,name = &quot;signal&quot;) "],["adding-rowsplit-groups.html", "Chapter 5 Adding rowsplit groups 5.1 Prepare data 5.2 Visualization data", " Chapter 5 Adding rowsplit groups Imaging you have multiple groups of binding sites, we can also group them into multiple subset panels in plot. The examples showed here. 5.1 Prepare data Here we give a list to group.split to define how the rowsplits are grouped by: library(ggChIPvis) library(ggplot2) # parse deeptools output deep_mat &lt;- parseDeeptools(deeptools_output = &quot;refPoint-data.gz&quot;) # add rowsplit groups mat_df &lt;- retriveData(mat.list = deep_mat,rm.extreme.value = T, sample.names = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), group.sample = rep(c(&quot;condition 1&quot;,&quot;condition 2&quot;),each = 2), row.split = rep(c(LETTERS[1:4]),c(500,1000,1500,2000)), group.split = list(group1 = c(&quot;A&quot;,&quot;B&quot;), group2 = c(&quot;C&quot;,&quot;D&quot;))) 5.2 Visualization data He we show the heatmap plot: ChipVis(object = mat_df,plot.type = &quot;heatmap&quot;) Add nested line: ChipVis(object = mat_df,plot.type = &quot;heatmap&quot;, sample.order = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), theme_params = list(strip.background = element_blank(), ggh4x.facet.nestline = element_line(linewidth = 1, colour = &quot;black&quot;))) Change the rowsplit groups order: ChipVis(object = mat_df,plot.type = &quot;heatmap&quot;, sample.order = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), theme_params = list(strip.background = element_blank(), ggh4x.facet.nestline = element_line(linewidth = 1, colour = &quot;black&quot;)), rowgroup.order = c(&quot;group2&quot;,&quot;group1&quot;)) Combine the profile and heatmap plot: ChipVis(object = mat_df,plot.type = &quot;both&quot;, sample.order = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), facet_profile_params = list(nest_line = element_line(linetype = 1)), add_nested_line = T) Remove the upper text of the heatmap: ChipVis(object = mat_df,plot.type = &quot;both&quot;, sample.order = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), facet_profile_params = list(nest_line = element_line(linetype = 1)), facet_heatmap_params = list(strip = ggh4x::strip_nested(text_x = ggh4x::elem_list_text(size = 0)), nest_line = element_line(linetype = 1)), add_nested_line = T) "],["statistics-of-enriched-signals.html", "Chapter 6 Statistics of enriched signals 6.1 Check extracted data 6.2 Drawing boxplot", " Chapter 6 Statistics of enriched signals We can use the extracted data to draw any plot what you want. One example is that we can do some statistics for the enrichment signals across the samples. 6.1 Check extracted data df.profile.data &lt;- mat_df$profile # check head(df.profile.data,3) # density x sample split lower_ci upper_ci group split.group # 1 2.082559 1 0 h A 0.1148654 4.050253 H3H4me3 group1 # 2 2.152473 2 0 h A 0.1412727 4.163673 H3H4me3 group1 # 3 2.250226 3 0 h A 0.2950159 4.205437 H3H4me3 group1 6.2 Drawing boxplot We can see the difference across different time point on multiple binding-site groups: library(ggpubr) library(ggh4x) # plot ggplot(df.profile.data, aes(x = sample,y = density,fill = sample)) + stat_boxplot(aes(ymin = ..lower.., ymax = ..upper..),outlier.shape = NA,width=0.5) + stat_boxplot(geom = &quot;errorbar&quot;, aes(ymin = ..ymax..),width=0.2,size=0.35) + stat_boxplot(geom = &quot;errorbar&quot;, aes(ymax = ..ymin..),width=0.2,size=0.35) + geom_boxplot(outlier.color = &quot;grey90&quot;,outlier.alpha = 0.5, width=0.5,alpha = 0.5) + facet_nested(~split.group + split, nest_line = element_line(linetype = 1)) + theme_classic() + scale_fill_brewer(palette = &quot;Paired&quot;) + theme(strip.background = element_blank(), axis.text = element_text(colour = &quot;black&quot;), strip.text = element_text(face = &quot;bold.italic&quot;,size = rel(1)), ggh4x.facet.nestline = element_line(linewidth = 1, colour = &quot;black&quot;)) + stat_compare_means(ref.group = &quot;0 h&quot;,label = &quot;p.signif&quot;) "],["chipheatmap-based-on-grid.html", "Chapter 7 ChipHeatmap based on grid 7.1 Load data 7.2 Single heatmap visualization 7.3 Plot getTagMatrix output", " Chapter 7 ChipHeatmap based on grid Here I developed ChipHeatmap and multiHeatmap functions to visualize the heatmap and profile plot based on grid and gtable R package. ChipHeatmap mainly draw single plot and multiHeatmap can combine multiple plot together. Now we show some examples here. 7.1 Load data You can load the nomalized matrix data which from normalizeToMatrix/getTagMatrix/parseDeeptools output, here we use parseDeeptools output data which is produced by deeptools software: library(ggChIPvis) library(grid) library(gtable) # parse deeptools output deep_mat &lt;- parseDeeptools(deeptools_output = &quot;refPoint-data.gz&quot;) row_split &lt;- rep(c(&quot;group 1&quot;,&quot;group 2&quot;,&quot;group 3&quot;),c(500,1500,3000)) 7.2 Single heatmap visualization Default output: grid.newpage() pushViewport(viewport(x = 0.5,y = 0.5,width = 0.5,height = 0.85)) ChipHeatmap(norm.mat = deep_mat[[1]]) popViewport() Rotate the xaxis: grid.newpage() pushViewport(viewport(x = 0.5,y = 0.5,width = 0.5,height = 0.85)) ChipHeatmap(norm.mat = deep_mat[[1]],ht.xaxis.rot = 45) popViewport() Control the sample label style: grid.newpage() pushViewport(viewport(x = 0.5,y = 0.5,width = 0.5,height = 0.85)) ChipHeatmap(norm.mat = deep_mat[[1]], sample.label = &quot;jinitaimei&quot;, label.rect.gp = gpar(fill = &quot;pink&quot;), label.gp = gpar(fontface = &quot;bold.italic&quot;)) popViewport() Control the panel space: grid.newpage() pushViewport(viewport(x = 0.5,y = 0.5,width = 0.5,height = 0.85)) ChipHeatmap(norm.mat = deep_mat[[1]], panel.col.space = 0,panel.row.space = 0) popViewport() Remove extreme values: grid.newpage() pushViewport(viewport(x = 0.5,y = 0.5,width = 0.5,height = 0.85)) ChipHeatmap(norm.mat = deep_mat[[1]],quantile.threshold = 0.99) popViewport() Control the heatmap colors: grid.newpage() pushViewport(viewport(x = 0.5,y = 0.5,width = 0.5,height = 0.85)) ChipHeatmap(norm.mat = deep_mat[[1]], ,quantile.threshold = 0.99, ht.col = c(&quot;grey50&quot;,&quot;green&quot;,&quot;red&quot;)) popViewport() Change the shape of the left anno bar: grid.newpage() pushViewport(viewport(x = 0.5,y = 0.5,width = 0.5,height = 0.85)) ChipHeatmap(norm.mat = deep_mat[[1]],draw.anno.left.shape = &quot;rect&quot;) popViewport() Change the legend position: grid.newpage() pushViewport(viewport(x = 0.5,y = 0.5,width = 0.5,height = 0.85)) ChipHeatmap(norm.mat = deep_mat[[1]], quantile.threshold = 0.99, legend.pos = &quot;bottom&quot;) popViewport() Add profile plot: grid.newpage() pushViewport(viewport(x = 0.5,y = 0.5,width = 0.5,height = 0.85)) ChipHeatmap(norm.mat = deep_mat[[1]],draw.profile = T) popViewport() Split the rows: grid.newpage() pushViewport(viewport(x = 0.5,y = 0.5,width = 0.5,height = 0.85)) ChipHeatmap(norm.mat = deep_mat[[1]],draw.profile = T, row.split = row_split) popViewport() Change the left annobar shape: grid.newpage() pushViewport(viewport(x = 0.5,y = 0.5,width = 0.5,height = 0.85)) ChipHeatmap(norm.mat = deep_mat[[1]],draw.profile = T, row.split = row_split, draw.anno.left.shape = &quot;rect&quot;) popViewport() Keep the cluster height size to be same: grid.newpage() pushViewport(viewport(x = 0.5,y = 0.5,width = 0.5,height = 0.85)) ChipHeatmap(norm.mat = deep_mat[[1]],draw.profile = T, row.split = row_split, keep.cluster.panel.same = T) popViewport() Control the size of each panel: grid.newpage() pushViewport(viewport(x = 0.5,y = 0.5,width = 0.5,height = 0.85)) ChipHeatmap(norm.mat = deep_mat[[1]],draw.profile = T, HeatmapLayout.params = list(heatmap.profile.h = 0.4, heatmap.size = c(0.5,0.5))) popViewport() Change the left annobar direction: grid.newpage() pushViewport(viewport(x = 0.5,y = 0.5,width = 0.5,height = 0.85)) ChipHeatmap(norm.mat = deep_mat[[1]], draw.anno.left.diretion = &quot;up&quot;) popViewport() Change the profile line colors, cluster panel gap and left annobar colors: grid.newpage() pushViewport(viewport(x = 0.5,y = 0.5,width = 0.5,height = 0.85)) ChipHeatmap(norm.mat = deep_mat[[1]], row.split = row_split, keep.cluster.panel.same = T, draw.profile = T, draw.anno.left.shape = &quot;rect&quot;, anno.left.col = RColorBrewer::brewer.pal(3,&quot;Set3&quot;), profile.line.col = RColorBrewer::brewer.pal(3,&quot;Set3&quot;), cluster.gap = 0.05) popViewport() 7.3 Plot getTagMatrix output library(ChIPseeker) library(TxDb.Hsapiens.UCSC.hg19.knownGene) txdb &lt;- TxDb.Hsapiens.UCSC.hg19.knownGene files &lt;- getSampleFiles() seek_list &lt;- lapply(4:5, function(x){ peak &lt;- readPeakFile(files[[x]]) ## The results of binning method and normal method are nearly the same. tagMatrix_binning &lt;- getTagMatrix(peak = peak, TxDb = txdb, upstream = 3000, downstream = 3000, type = &quot;body&quot;, by = &quot;gene&quot;, nbin = 800) }) grid.newpage() pushViewport(viewport(x = 0.5,y = 0.5,width = 0.5,height = 0.85)) ChipHeatmap(norm.mat = seek_list[[1]], heatmap_rank_method = &quot;sum&quot;, draw.profile = T) popViewport() "],["multiheatmap-based-on-grid.html", "Chapter 8 multiHeatmap based on grid 8.1 Combine multiple plot 8.2 Row split 8.3 Add group for samples 8.4 Draw getTagMatrix output", " Chapter 8 multiHeatmap based on grid multiHeatmap is mainly based on ChipHeatmap to produce plot and parameters can be passed with it. 8.1 Combine multiple plot multiHeatmap need accept normalizeToMatrix/getTagMatrix/parseDeeptools output: col2 &lt;- RColorBrewer::brewer.pal(4,&quot;Set1&quot;) col &lt;- list(c(&quot;white&quot;,col2[1]),c(&quot;white&quot;,col2[2]), c(&quot;white&quot;,col2[3]),c(&quot;white&quot;,col2[4])) multiHeatmap(mat.list = deep_mat, sample.label = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;)) Control sample label style: multiHeatmap(mat.list = deep_mat, sample.label = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), ChipHeatmap.params = list(label.rect.gp = gpar(fill = NA,col = NA))) Change the heatmap color: multiHeatmap(mat.list = deep_mat, sample.label = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), heatmap.col = col) Keep one left annobar if your row orders and numbers are same: multiHeatmap(mat.list = deep_mat, sample.label = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), heatmap.col = col, keep.one.left.annobar = T) Supply with ChipHeatmap parameters: multiHeatmap(mat.list = deep_mat, sample.label = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), heatmap.col = col, keep.one.left.annobar = T, ChipHeatmap.params = list(HeatmapLayout.params = list(heatmap.size = c(0.9,0.5)), ht.xaxis.rot = 45)) scale.range can make the multiple legend signal range to be same, so you can keep just one legend: multiHeatmap(mat.list = deep_mat, sample.label = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), keep.one.left.annobar = T, ChipHeatmap.params = list(HeatmapLayout.params = list(heatmap.size = c(0.9,0.5))), scale.range = T, keep.one.legend = T) 8.2 Row split Split the rows: multiHeatmap(mat.list = deep_mat, sample.label = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), heatmap.col = col, row.split = row_split) Keep only one legend: multiHeatmap(mat.list = deep_mat, sample.label = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), row.split = row_split, keep.one.left.annobar = T, scale.range = T, keep.one.legend = T) ## Draw profile multiHeatmap(mat.list = deep_mat, sample.label = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), draw.profile = T) scale.y.range can make the multiple profile y scales to be same: multiHeatmap(mat.list = deep_mat, sample.label = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), draw.profile = T, scale.y.range = T) We can remove some redundant elements: multiHeatmap(mat.list = deep_mat, sample.label = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), draw.profile = T, scale.y.range = T, scale.range = T, ChipHeatmap.params = list(HeatmapLayout.params = list(heatmap.size = c(0.9,0.5))), keep.one.left.annobar = T, keep.one.legend = T, keep.one.line.legend = T, keep.one.profile.yaxis = T) Add row split: multiHeatmap(mat.list = deep_mat, sample.label = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), draw.profile = T, scale.y.range = T, ChipHeatmap.params = list(HeatmapLayout.params = list(heatmap.size = c(1,0.5))), plot.size = c(0.8,0.8), scale.range = T, keep.one.left.annobar = T, keep.one.legend = T, keep.one.line.legend = T, keep.one.profile.yaxis = T, row.split = row_split) 8.3 Add group for samples You can supply a list to define the how the samples be groupyed by. You must keep the sample orders to be same with you group orders: Add one group: multiHeatmap(mat.list = deep_mat, sample.label = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), sample.group1 = list(group1 = c(&quot;0 h&quot;,&quot;2 h&quot;), group2 = c(&quot;8 h&quot;,&quot;24 h&quot;))) Add two groups: multiHeatmap(mat.list = deep_mat, sample.label = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), sample.group1 = list(group1 = c(&quot;0 h&quot;,&quot;2 h&quot;), group2 = c(&quot;8 h&quot;,&quot;24 h&quot;)), sample.group2 = list(control = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8h&quot;), treat = c(&quot;24 h&quot;))) Control the top annobar style: multiHeatmap(mat.list = deep_mat, sample.label = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), sample.group1 = list(group1 = c(&quot;0 h&quot;,&quot;2 h&quot;), group2 = c(&quot;8 h&quot;,&quot;24 h&quot;)), sample.group2 = list(control = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8h&quot;), treat = c(&quot;24 h&quot;)), draw.anno.fun.params.g1 = list(group.anno.rect.fill = c(&quot;orange&quot;,&quot;pink&quot;), group.anno.rect.col = NA), draw.anno.fun.params.g2 = list(group.anno.rect.fill = c(&quot;purple&quot;,&quot;grey&quot;), group.anno.rect.col = NA)) Control the top annobar height: multiHeatmap(mat.list = deep_mat, sample.label = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), sample.group1 = list(group1 = c(&quot;0 h&quot;,&quot;2 h&quot;), group2 = c(&quot;8 h&quot;,&quot;24 h&quot;)), sample.group2 = list(control = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8h&quot;), treat = c(&quot;24 h&quot;)), draw.anno.fun.params.g1 = list(group.anno.rect.fill = c(&quot;orange&quot;,&quot;pink&quot;)), draw.anno.fun.params.g2 = list(group.anno.rect.fill = c(&quot;purple&quot;,&quot;grey&quot;)), panel.rect.gp = gpar(fill = &quot;grey90&quot;), anno.panel.height = 0.05) Add line anno: multiHeatmap(mat.list = deep_mat, sample.label = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), sample.group1 = list(group1 = c(&quot;0 h&quot;,&quot;2 h&quot;), group2 = c(&quot;8 h&quot;,&quot;24 h&quot;)), sample.group2 = list(control = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8h&quot;), treat = c(&quot;24 h&quot;)), draw.anno.fun.params.g1 = list(sample.anno.type = &quot;line&quot;), draw.anno.fun.params.g2 = list(sample.anno.type = &quot;line&quot;)) Draw a complete plot: multiHeatmap(mat.list = deep_mat, sample.label = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8 h&quot;,&quot;24 h&quot;), sample.group1 = list(group1 = c(&quot;0 h&quot;,&quot;2 h&quot;), group2 = c(&quot;8 h&quot;,&quot;24 h&quot;)), sample.group2 = list(control = c(&quot;0 h&quot;,&quot;2 h&quot;,&quot;8h&quot;), treat = c(&quot;24 h&quot;)), draw.anno.fun.params.g1 = list(sample.anno.type = &quot;line&quot;), draw.anno.fun.params.g2 = list(sample.anno.type = &quot;line&quot;), scale.range = T, scale.y.range = T, draw.profile = T, keep.row.order = T, keep.one.left.annobar = T, keep.one.profile.yaxis = T, keep.one.line.legend = T, keep.one.legend = T, plot.size = c(0.75,0.9), ChipHeatmap.params = list(HeatmapLayout.params = list(heatmap.size = c(1,0.5)))) 8.4 Draw getTagMatrix output multiHeatmap(mat.list = seek_list, quantile.threshold = 1, heatmap_rank_method = &quot;sum&quot;, keep.row.order = F, sample.label = c(&quot;CBX6&quot;,&quot;CBX7&quot;)) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
